# MiddleMail Docker image
# ref: https://hub.docker.com/r/miaplaza/middlemail/tags
image:
  repository: miaplaza/middlemail
  # Defaults to 'Always' if image tag is 'latest', else to 'IfNotPresent'
  # pullPolicy: Always

replicaCount: 1

rabbitmq:
  # Whether this chart is going to deploy its own RabbitMQ instance and will
  # expose it as a service. When set, any parameters here are passed on to
  # Bitnami's RabbitMQ chart.
  provided: true

  # When not using the provided RabbitMQ, set these to connect to an
  # external instance.
  # host: localhost
  # port: 5673

  auth:
    username: user
    # existingPasswordSecret: a secret containing rabbitmq-password


  # Install DelayedMessageExchange plugin into a provided rabbitmq

  initContainers:
    - name: download-delayed-message-exchange
      image: bitnami/rabbitmq:3.8.5
      command: ['sh', '-c', 'curl -L --output /plugins/rabbitmq_delayed_message_exchange-3.8.0.ez https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.8.0/rabbitmq_delayed_message_exchange-3.8.0.ez && cp /opt/bitnami/rabbitmq/plugins/* /plugins']
      volumeMounts:
      - name: plugins
        mountPath: /plugins
  extraVolumes:
    - name: plugins
  extraVolumeMounts:
    - name: plugins
      mountPath: /opt/bitnami/rabbitmq/plugins

  # We run a specific tag of RabbitMQ just to make sure that we copy the plugins from the correct version.
  image.tag: 3.8.5

  extraPlugins: rabbitmq_delayed_message_exchange

easynetq:
  # Connection String parameters, see
  # https://github.com/EasyNetQ/EasyNetQ/wiki/Connecting-to-RabbitMQ
  prefetchCount: 10
  product: MiddleMail
  
  # These can also be set to deviate from their defaults:
  # virtualHost: /
  # requestedHeartbeat: 10
  # publisherConfirms: 10
  # persistentMessages: true

elasticsearch:
  # Whether this chart is going to deploy its own Elasticsearch instance and
  # will expose it as a service. When set, any parameters here are passed on to
  # Bitnami's Elasticsearch chart.
  provided: true
  # Whether MiddleMail should connect to an Elasticsearch instance as an activity storage backend.
  enabled: true

  # The Elasticsearch index to write to
  index: MiddleMail

  # When not using the provided Elasticsearch, set this to connect to an
  # external instance:
  # uri: https://elasticsearch:9200

# Any parameters set here will be passed on to the bundled redis instance.
redis: {}

smtp:
  # Whether to actually send out mails through SMTP
  enabled: false
  # Name of a secret that holds SMTP credentials, i.e.,
  # host, port, username, password
  secret: ~

mime:
  # Domain part of the MIME multipart delimiters as in random-id@domain.
  domain: localhost

backoff:
  # When processing fails, a message is retried with an exponential backoff,
  # starting at multiplicator many seconds, then 2*multiplicator seconds, then
  # 4*multiplicator seconds, ...
  multiplicator: 60
